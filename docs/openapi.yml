openapi: 3.0.0

info:
  title: Expenseably API
  description: Expenseably API. Manage your expenses without tears or fears.
  version: 1.0.0

servers:
  - url: http://localhost:5000/api/v1
    description: Dev API

  - url: https://extenseably-api.onrender.com/api/v1
    description: Prod API

paths:
  /auth:
    post:
      tags: ["auth"]
      summary: Login and returns the session cookie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/authentication"
      security: []
      responses:
        201:
          description: User authenticate successfully
          headers:
            Set-Cookie:
              schema:
                type: string
                example: connect.sid=abcde12345; Path=/; HttpOnly
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/unathorized"
    get:
      tags: ["auth"]
      summary: Check if user is authenticated
      security: []
      responses:
        200:
          description: User can or not be logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  authenticated:
                    type: boolean
                    description: If true, then user is logged in
                    example: true
    delete:
      tags: ["auth"]
      summary: Logout
      security: []
      responses:
        "204":
          description: Destroys user session

  /user:
    get:
      tags: ["user"]
      summary: "Retrieves the user that is logged in"
      responses:
        200:
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/user"
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/not-found"

  /banks:
    get:
      tags: ["banks"]
      summary: "Retrieves all the banks associated with the logged user"
      responses:
        200:
          description: Banks retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  banks:
                    type: array
                    items:
                      $ref: "#/components/schemas/bank"
    post:
      tags: ["banks"]
      summary: "Creates a bank"
      responses:
        201:
          description: Banks created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  bank:
                    $ref: "#/components/schemas/bank"

  /banks/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the bank
        required: true
        schema:
          type: string

    put:
      tags: ["banks"]
      summary: "Updates a bank"
      responses:
        200:
          description: Banks updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  bank:
                    $ref: "#/components/schemas/bank"
        404:
          description: Bank not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/not-found"

    delete:
      tags: ["banks"]
      summary: "Deletes a bank"
      responses:
        200:
          description: Banks deleted successfully
        404:
          description: Bank not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/not-found"

  /banks/{id}/transactions:
    parameters:
      - name: id
        in: path
        description: ID of the bank
        required: true
        schema:
          type: string
    get:
      tags: ["transactions"]
      summary: "Retrieves all the transactions associated to the bank"
      responses:
        200:
          description: Transactions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      $ref: "#/components/schemas/transaction"

  /transactions:
    post:
      tags: ["transactions"]
      summary: "Creates a transaction"
      responses:
        201:
          description: Transaction created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  bank:
                    $ref: "#/components/schemas/transaction"

  /transactions/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the transaction
        required: true
        schema:
          type: string

    put:
      tags: ["transactions"]
      summary: "Updates a transaction"
      responses:
        200:
          description: Transaction updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  bank:
                    $ref: "#/components/schemas/transaction"
        404:
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/not-found"

    delete:
      tags: ["transactions"]
      summary: "Deletes a transaction"
      responses:
        200:
          description: Transaction deleted successfully
        404:
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/not-found"

components:
  securitySchemes:
    sessionAuth:
      type: apiKey
      in: cookie
      name: connect.sid
  schemas:
    authentication:
      type: object
      properties:
        username:
          type: string
          description: User email
          example: walter_white@gmail.com
        password:
          type: string
          description: User password
          example: HelloWorld@123

    user:
      type: object
      properties:
        id:
          type: string
          example: 624bb08a91728a0b74b23cc3
        name:
          type: string
          example: Walter White
        email:
          type: string
          example: walter_white@gmail.com
        createdAt:
          type: string
          example: 2020-03-10T23:44:56.289Z

    bank:
      type: object
      properties:
        id:
          type: string
          example: 624bc151c619d58b8aefc830
        name:
          type: string
          example: Bank of Canada
        user:
          $ref: "#/components/schemas/user"
        createdAt:
          type: string
          example: 2020-03-10T23:44:56.289Z

    transaction:
      type: object
      properties:
        id:
          type: string
          example: 624bb08a91728a0b74b23cc3
        amount:
          type: string
          example: 1200.00
        type:
          type: string
          enum:
            - INCOME
            - EXPENSE
          example: INCOME
        category:
          type: string
          enum:
            - SALARY
            - FOOD
            - TRANSPORT
            - HOUSE
            - OTHER
          example: SALARY
        currency:
          type: string
          enum:
            - USD
            - EUR
          example: USD
        description:
          type: string
          nullable: true
          example: Vacation trip
        createdAt:
          type: string
          example: 2020-03-10T23:44:56.289Z
        bank:
          $ref: "#/components/schemas/bank"

    unathorized:
      type: object
      properties:
        statusCode:
          type: number
          example: 401
        error:
          type: string
          example: Unauthorized
        message:
          type: string
          example: Unauthorized

    not-found:
      type: object
      properties:
        statusCode:
          type: number
          example: 404
        error:
          type: string
          example: Not found
        message:
          type: string
          example: Not found

security:
  - sessionAuth: []
